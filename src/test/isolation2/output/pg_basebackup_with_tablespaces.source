include: helpers/gp_management_utils_helpers.sql;
CREATE

-- Given a segment with a database that has a tablespace
!\retcode mkdir -p @testtablespace@/some_isolation2_pg_basebackup_tablespace;
-- start_ignore

-- end_ignore
(exited with code 0)

drop tablespace if exists some_isolation2_pg_basebackup_tablespace;
DROP
create tablespace some_isolation2_pg_basebackup_tablespace location '@testtablespace@/some_isolation2_pg_basebackup_tablespace';
CREATE

-- And a database using the tablespace
drop database if exists some_database_with_tablespace;
DROP
create database some_database_with_tablespace tablespace some_isolation2_pg_basebackup_tablespace;
CREATE

-- And a database without using the tablespace
drop database if exists some_database_without_tablespace;
DROP
create database some_database_without_tablespace;
CREATE

-- And a table and index, temp table and index using the tablespace
1:@db_name some_database_without_tablespace: CREATE TABLE test(a INT, b INT) TABLESPACE some_isolation2_pg_basebackup_tablespace;
CREATE
1:@db_name some_database_without_tablespace: CREATE INDEX test_index on test(a) TABLESPACE some_isolation2_pg_basebackup_tablespace;
CREATE
2:@db_name some_database_without_tablespace: CREATE TEMP TABLE test_tmp(a INT, b INT) TABLESPACE some_isolation2_pg_basebackup_tablespace;
CREATE
2:@db_name some_database_without_tablespace: CREATE INDEX test_tmp_index on test_tmp(a) TABLESPACE some_isolation2_pg_basebackup_tablespace;
CREATE

1q: ... <quitting>

-- When we create a full backup
select pg_basebackup(address, 100, port, 'some_replication_slot', '@testtablespace@/some_isolation2_pg_basebackup', false) from gp_segment_configuration where content = 0 and role = 'p';
 pg_basebackup 
---------------
               
(1 row)

-- Then we should have two directories in newly created target tablespace, some_database_with_tablespace and some_database_without_tablespace
select count_of_items_in_directory('@testtablespace@/some_isolation2_pg_basebackup_tablespace/GPDB_*db100/');
 count_of_items_in_directory 
-----------------------------
 2                           
(1 row)

-- Then we should have four files in newly created target tablespace under the some_database_without_tablespace, test, test_index, test_tmp, test_tmp_index
select count_of_items_in_database_directory('@testtablespace@/some_isolation2_pg_basebackup_tablespace/GPDB_*db100/', oid) from pg_database where datname='some_database_without_tablespace';
 count_of_items_in_database_directory 
--------------------------------------
 4                                    
(1 row)

-- When we create a full backup using force overwrite
select pg_basebackup(address, 200, port, 'some_replication_slot', '@testtablespace@/some_isolation2_pg_basebackup', true) from gp_segment_configuration where content = 0 and role = 'p';
 pg_basebackup 
---------------
               
(1 row)

-- Then we should have two directories in newly created target tablespace, some_database_with_tablespace and some_database_without_tablespace
select count_of_items_in_directory('@testtablespace@/some_isolation2_pg_basebackup_tablespace/GPDB_*db200/');
 count_of_items_in_directory 
-----------------------------
 2                           
(1 row)

-- Then we should have four files in newly created target tablespace under the some_database_without_tablespace, test, test_index, test_tmp, test_tmp_index
select count_of_items_in_database_directory('@testtablespace@/some_isolation2_pg_basebackup_tablespace/GPDB_*db100/', oid) from pg_database where datname='some_database_without_tablespace';
 count_of_items_in_database_directory 
--------------------------------------
 4                                    
(1 row)

2q: ... <quitting>

-- Cleanup things we've created
0U: select pg_drop_replication_slot('some_replication_slot');
 pg_drop_replication_slot 
--------------------------
                          
(1 row)
0Uq: ... <quitting>
drop database some_database_with_tablespace;
DROP
drop database some_database_without_tablespace;
DROP
drop tablespace some_isolation2_pg_basebackup_tablespace;
DROP
!\retcode rm -rf @testtablespace@/some_isolation2_pg_basebackup;
-- start_ignore

-- end_ignore
(exited with code 0)
!\retcode rm -rf @testtablespace@/some_isolation2_pg_basebackup_tablespace/*;
-- start_ignore

-- end_ignore
(exited with code 0)

-- Test cases in this file actually created below xlog records:
--   create tablespace
--   checkpoint-1
--   create db
--   checkpoint-2
--   drop db
--   drop tablespace
--
-- Mirror receive and replay these records, when a checkpoint is replayed, it
-- doesn't flush anything at that point, instead checkpointer process will perform
-- a restartpoint later and update the pg_control. If the following cases restart
-- mirror in immediate mode, the pg_control's latest checkpoint location will still
-- point to checkpoint-1 and start replay at that point, then replay of "create db"
-- will fail because the tablespace is gone.
--
-- To make sure pg_control's checkpoint location catch up, we do a fast restart
-- here, so mirror will force a restartpoint before restart.
--
!\retcode gpstop -ra -M fast;
-- start_ignore

-- end_ignore
(exited with code 0)
